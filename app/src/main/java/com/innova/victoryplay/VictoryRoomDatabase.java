package com.innova.victoryplay;import android.content.Context;import androidx.annotation.NonNull;import androidx.room.Database;import androidx.room.Room;import androidx.room.RoomDatabase;import androidx.sqlite.db.SupportSQLiteDatabase;import com.innova.victoryplay.daos.NoteDao;import com.innova.victoryplay.daos.VerseDao;import com.innova.victoryplay.models.Audio;import com.innova.victoryplay.models.Note;import com.innova.victoryplay.models.Pdf;import com.innova.victoryplay.models.Verse;import com.innova.victoryplay.models.Video;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;@Database(entities = {Verse.class, Audio.class, Note.class, Pdf.class, Video.class},        version = 4, exportSchema = false)public abstract class VictoryRoomDatabase extends RoomDatabase {    public static final String VICTORY_DATABASE = "victory_database";    public abstract VerseDao verseDao();    public abstract NoteDao noteDao();    private static volatile VictoryRoomDatabase INSTANCE;    private static final int NUMBER_OF_THREADS = 4;    public static final ExecutorService databaseWriteExecutor =            Executors.newFixedThreadPool(NUMBER_OF_THREADS);    public static VictoryRoomDatabase getDatabase(final Context context) {        if (INSTANCE == null) {            synchronized (VictoryRoomDatabase.class) {                if (INSTANCE == null) {                    INSTANCE = Room.databaseBuilder(context.getApplicationContext(),                            VictoryRoomDatabase.class, VICTORY_DATABASE)                            .addCallback(sRoomDatabaseCallback)                            // TODO: fallbackToDestructiveMigration                            .fallbackToDestructiveMigration()                            // TODO: REMOVE ACCESS ON MAIN THREAD                            .allowMainThreadQueries()                            .build();                }            }        }        return INSTANCE;    }    // !!!!! START WITH FRESH DATA ON EACH LAUNCH    private static VictoryRoomDatabase.Callback sRoomDatabaseCallback = new VictoryRoomDatabase.Callback() {        @Override        public void onOpen(@NonNull SupportSQLiteDatabase db) {            super.onOpen(db);            databaseWriteExecutor.execute(() -> {                VerseDao verseDao = INSTANCE.verseDao();//                verseDao.deleteAll();            });        }    };}